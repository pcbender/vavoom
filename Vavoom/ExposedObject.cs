// ***********************************************************************
// Assembly         : Vavoom
// Author           : Michael Rose
// Created          : 05-20-2019
//
// Last Modified By : Michael Rose
// Last Modified On : 05-20-2019
// ***********************************************************************
// <copyright file="ExposedObject.cs" company="Heartland Payment Systems">
//     Copyright (c) Heartland Payment Systems, Inc.. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using ImpromptuInterface;

namespace Vavoom
{
    /// <summary>
    /// Class ExposedObject.
    /// </summary>
    /// <seealso cref="System.Dynamic.DynamicObject" />
    /// <autogeneratedoc />
    public class ExposedObject : DynamicObject
    {
        private readonly Type _type;
        private readonly Dictionary<string, Dictionary<int, List<MethodInfo>>> _instanceMethods;
        private readonly Dictionary<string, Dictionary<int, List<MethodInfo>>> _genInstanceMethods;

        private ExposedObject(object obj)
        {
            Object = obj;
            _type = obj.GetType();

            _instanceMethods = InstanceMethods(_type);

            _genInstanceMethods = GenInstanceMethods(_type);

            var baseType = _type.BaseType;

            while (baseType != null)
            {
                var instanceMethods = InstanceMethods(baseType);

                foreach (var (key, value) in instanceMethods)
                {
                    if (_instanceMethods.ContainsKey(key))
                        continue;
                    _instanceMethods.Add(key, value);
                }

                var genInstanceMethods = GenInstanceMethods(baseType);

                foreach (var (key, value) in genInstanceMethods)
                {
                    if(_genInstanceMethods.ContainsKey(key))
                        continue;
                    _genInstanceMethods.Add(key, value);
                }

                baseType = baseType.BaseType;
            }
        }

        /// <summary>
        /// Gets the object.
        /// </summary>
        /// <value>The object.</value>
        /// <autogeneratedoc />
        public object Object { get; }

        public static T New<T>(Type type)
        {
            var eo = new ExposedObject(Create(type));

            T obj = eo.ActLike();
            return obj;
        }

        public static T New<T>(Type type, params object[] constructorArgs)
        {
            var eo = new ExposedObject(Create(type, constructorArgs));

            T obj = eo.ActLike();
            return obj;
        }

        /// <summary>
        /// News the specified type.
        /// </summary>
        /// <param name="type">The type.</param>
        /// <returns>dynamic.</returns>
        /// <autogeneratedoc />
        public static dynamic New(Type type)
        {
            return new ExposedObject(Create(type));
        }

        public static dynamic New(Type type, params object[] constructorArgs)
        {
            return new ExposedObject(Create(type, constructorArgs));
        }

        private static object Create(Type type)
        {
            var constructorInfo = GetConstructorInfo(type);
            return constructorInfo.Invoke(new object[0]);
        }

        private static object Create(Type type, params object[] args )
        {
            var constructorInfo = GetConstructorInfo(type, args.Select(a => a.GetType()).ToArray());
            return constructorInfo.Invoke(args);
        }

        private static ConstructorInfo GetConstructorInfo(Type type, params Type[] args)
        {
            var constructorInfo = type.GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null, args, null);
            if (constructorInfo != null)
            {
                return constructorInfo;
            }

            throw new MissingMemberException(type.FullName,
                $".ctor({string.Join(", ", Array.ConvertAll(args, t => t.FullName))})");
        }

        /// <summary>
        /// From the specified object.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns>dynamic.</returns>
        /// <autogeneratedoc />
        public static dynamic From(object obj)
        {
            return new ExposedObject(obj);
        }

        /// <summary>
        /// Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as calling a method.
        /// </summary>
        /// <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &amp;quot;SampleMethod&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
        /// <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, args[0] is equal to 100.</param>
        /// <param name="result">The result of the member invocation.</param>
        /// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        /// <autogeneratedoc />
        public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
        {
            // Get type args of the call
            var typeArgs = ExposedObjectHelper.GetTypeArgs(binder);
            if (typeArgs != null && typeArgs.Length == 0) typeArgs = null;

            //
            // Try to call a non-generic instance method
            //
            if (typeArgs == null
                    && _instanceMethods.ContainsKey(binder.Name)
                    && _instanceMethods[binder.Name].ContainsKey(args.Length)
                    && ExposedObjectHelper.InvokeBestMethod(args, Object, _instanceMethods[binder.Name][args.Length], out result))
            {
                return true;
            }

            //
            // Try to call a generic instance method
            //
            if (typeArgs != null &&_instanceMethods.ContainsKey(binder.Name) && _instanceMethods[binder.Name].ContainsKey(args.Length))
            {
                var methods = new List<MethodInfo>();

                foreach (var method in _genInstanceMethods[binder.Name][args.Length])
                {
                    if (method.GetGenericArguments().Length == typeArgs.Length)
                    {
                        methods.Add(method.MakeGenericMethod(typeArgs));
                    }
                }

                if (ExposedObjectHelper.InvokeBestMethod(args, Object, methods, out result))
                {
                    return true;
                }
            }

            result = null;
            return false;
        }

        /// <summary>
        /// Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
        /// </summary>
        /// <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = &amp;quot;Test&amp;quot;, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &amp;quot;SampleProperty&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
        /// <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = &amp;quot;Test&amp;quot;, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, the value is &amp;quot;Test&amp;quot;.</param>
        /// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        /// <autogeneratedoc />
        public override bool TrySetMember(SetMemberBinder binder, object value)
        {
            var propertyInfo = PropertyInfo(binder.Name, _type);

            if (propertyInfo != null)
            {
                propertyInfo.SetValue(Object, value, null);
                return true;
            }

            var fieldInfo = FieldInfo(binder.Name, _type);

            if (fieldInfo != null)
            {
                fieldInfo.SetValue(Object, value);
                return true;
            }

            return false;
        }

        /// <summary>
        /// Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
        /// </summary>
        /// <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &amp;quot;SampleProperty&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
        /// <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
        /// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        /// <autogeneratedoc />
        public override bool TryGetMember(GetMemberBinder binder, out object result)
        {
            var propertyInfo = PropertyInfo(binder.Name, Object.GetType());

            if (propertyInfo != null)
            {
                result = GetValueOrExposedObject(propertyInfo);
                return true;
            }

            var fieldInfo = FieldInfo(binder.Name, Object.GetType());

            if (fieldInfo != null)
            {
                result = GetValueOrExposedObject(fieldInfo);
                return true;
            }

            result = null;
            return false;
        }

        private PropertyInfo PropertyInfo(string name, Type type)
        {
            while (true)
            {
                if (type == null) 
                    return null;

                var propertyInfo = type.GetProperty(name, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

                if (propertyInfo != null) 
                    return propertyInfo;

                type = type.BaseType;
            }
        }

        private FieldInfo FieldInfo(string name, Type type)
        {
            while (true)
            {
                if (type == null) 
                    return null;

                var fieldInfo = type.GetField(name, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

                if (fieldInfo != null) 
                    return fieldInfo;

                type = type.BaseType;
            }
        }

        /// <summary>
        /// Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
        /// </summary>
        /// <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Type returns the <see cref="T:System.String"></see> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
        /// <param name="result">The result of the type conversion operation.</param>
        /// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        /// <autogeneratedoc />
        public override bool TryConvert(ConvertBinder binder, out object result)
        {
            result = Object;
            return true;
        }

        private object GetValueOrExposedObject(PropertyInfo info)
        {
            if (info.PropertyType.IsPrimitive)
                return info.GetValue(Object, null);
            if(typeof(string) == info.PropertyType)
                return info.GetValue(Object, null);
            return From(info.GetValue(Object));
        }

        private object GetValueOrExposedObject(FieldInfo info)
        {
            if (info.FieldType.IsPrimitive)
                return info.GetValue(Object);
            if(typeof(string) == info.FieldType)
                return info.GetValue(Object);
            return From(info.GetValue(Object));
        }

        private Dictionary<string, Dictionary<int, List<MethodInfo>>> GenInstanceMethods(Type type)
        {
            return type
                .GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance)
                .Where(m => m.IsGenericMethod)
                .GroupBy(m => m.Name)
                .ToDictionary(
                    p => p.Key,
                    p => p.GroupBy(r => r.GetParameters().Length).ToDictionary(r => r.Key, r => r.ToList()));
        }

        private Dictionary<string, Dictionary<int, List<MethodInfo>>> InstanceMethods(Type type)
        {
            return type
                .GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance)
                .Where(m => !m.IsGenericMethod)
                .GroupBy(m => m.Name)
                .ToDictionary(
                    p => p.Key,
                    p => p.GroupBy(r => r.GetParameters().Length).ToDictionary(r => r.Key, r => r.ToList()));
        }
    }

}


